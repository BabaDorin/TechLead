
	TO DO IMMEDIATELY

>>>> Find a way to calculate the points a user has got for a specifici problem. For example,
	if the best submission for the problem ID 25 has 50 points, then it will be stored somewhere.. you got it.
	>> Add a string property called - BestSubmissions - to the ApplicationUser model. It will have the next format:
		>> [delimitator]ExerciseID[delimitator]ExerciseName[delimitator]SubmissionId[delimitator]TotalPointsForExercise[delimitator]MaxScoredPoints
			>>DO NOT INSERT DELIMITATOR AT THE BEGINNING IF IT IS THE FIRST OBJECT IN THE STRING.

	>>Add a BestSubmissions[] property to the ProfileViewController
		>> int ExerciseId, string name, int submissionId, doubleTotalPoints, double MaxScoredPoints
	
	>> Every time a user submits something, there are 2 cases:
		>>1) The user submits a solutiong for a specific problem for the first time, in this case the data is inserted into the BestSubmissions property
		>>2) It is not the first submission for that specific problem, in this case, the BestSubmission string is transformed into an array of BestSubmissions[], look for the
		object having the property ExerciseID the same as the last problem, then check if the last amount of points the user has scored is bigger than the value that 
		has been already there, then update it and add the difference between scored points of the last submission and the current one to the user's totalPoints
		property. Otherwise, skip and go to the next step.

>>>> The user who creates a problem can assign will have to assign points for each backend testcase.
for example, an easy test case may be scored with 10 points, a harder one - with 30 points.
 
>>>> Admins are able to see submission's code => Solve the problems with those admins features that do not work 

-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

	TO DO

8) Calculate the amount of points for each test case, depending on the number of tests and the total points number.

2) Error handling and displaying error pages when something happens. 

3) 404 page

4) Count total poins gained per submission.

5) Count total points for each application user.  ==> If one submission gets 20 points, he gets 20 points. If the second submission
for the same problem gets more than 20, then totalPoints + = max (previous submission result, current submission result);

6) Design !!! (For problem display, submission, profile etc etc etc etc)

7) Implement a hint sistem. Like when the user can not figure out where's the mistake, the are able to press on that hint button
and will see the last executed input, his program's output and the correct output for the first test that has not been passed;
For example, if the user's code runs for the first 4 testcases, but for the next 6 the output is wrong, then, when the hint button will 
be pressed, it will display the input, user's output and the desired output for the test number 5, because that was the first test case
the user has failed. It won't cost anything. 


2.a) Update username everywhere when the user updates his username <3
3) Make a page for admins only where they can assign roles to other users




>>>>>>>>>>>>>>>>>> DONE <<<<<<<<<<<<<<<<<<<<<,

>>>>  Make at least one test case mandatory into create problem view. 

>>>>  Implement the roles sistem. (Administrator etc etc etc);

>>>>  Enable edit problem only for the administrators and problem creator.

>>>> Exercise will have another property, called archieved (Bool).
	True => Problem is 'deleted'
	ApplicationUser will have 3 more properties: 1) SubmissionsCollection, which will contain 
	the ids of his submissions delimited by data.delimitator.
	In the same way, the id's of the created problems will be stored.
	The third property will contain the ids of the problems that were created
	by him and deleted. Only he will be able to see those problem!

>>>> Design for 'delete problem' view

>>>> Implement the system with check box for 'Make your source code public'


>>>> Smth is wrong with error messages => Those are not always displayed / not displayed properly.

>>>> Smth is wrong with the points gained. Need to fix it

>>>> Do not send the Exercise view model having backend tests to 'Details page'.
Is should be sent only on 'Update' view. 
